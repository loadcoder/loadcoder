package com.loadcoder.network.testing;

import static com.loadcoder.statics.LogbackLogging.getNewLogDir;
import static com.loadcoder.statics.LogbackLogging.setResultDestination;
import static com.loadcoder.statics.Statics.*;

import org.testng.annotations.Test;

import com.loadcoder.load.chart.logic.RuntimeChart;
import com.loadcoder.load.scenario.ExecutionBuilder;
import com.loadcoder.load.scenario.Load;
import com.loadcoder.load.scenario.LoadBuilder;
import com.loadcoder.load.scenario.LoadScenarioTyped;
import com.loadcoder.load.scenario.Scenario;
import com.loadcoder.result.Result;
import com.loadcoder.statics.SummaryUtils;

public class GeneratedLoadTest {

	/**
	 * This test exemplifies a best practice of how to structure a loadcoder test
	 * 
	 * This test requires that the rest service is already started and available at
	 * 7060 To start the spring boot server, execute the following command inside
	 * the directory loadcoder-examples/rest-loadtest/server: mvn spring-boot:run
	 */
	@Test
	public void bestPractiseLoadTestDesign() {

		// Giving the test a unique directory for the result logs
		setResultDestination(getNewLogDir("target", "bestPracticeLoadTest"));

		LoadScenarioTyped<ThreadInstance> loadScenario = new LoadScenarioTyped<ThreadInstance>() {

			@Override
			public void loadScenario(ThreadInstance t) {
				/*
				 * Instead of implementing one giant method, the load test logic is broken out
				 * into separate classes that each can be tested separately, see the test
				 * testGreetingsLogicAlone
				 */
				t.getScenarioLogic().performGreeting();
			}

			@Override
			public ThreadInstance createInstance() {
				/*
				 * The ThreadInstance created here for each thread will be a container for
				 * everything uniquely to each specific thead, and will in this case also hold
				 * separate instances for the load test logic.
				 */
				return new ThreadInstance(this);
			}
		};

		Load load = new LoadBuilder(loadScenario).amountOfThreads(1)
				.stopDecision(iterations(1)).build();

		RuntimeChart runtimeChart = new RuntimeChart();

		Result result = new ExecutionBuilder(load).storeAndConsumeResultRuntime(runtimeChart).build().execute()
				.andWait().getReportedResultFromResultFile();

		SummaryUtils.printSimpleSummary(result, "Greetings loadtest");

		runtimeChart.waitUntilClosed();

	}

	/**
	 * This test how you can invoke your test logic without having to setup a load
	 * test. These kinds of tests is perfect to execute early in the development
	 * cycle in order to verify that the load test logic still works
	 */
	@Test
	public void testGreetingsLogicAlone() {
		ThreadInstance threadInstance = new ThreadInstance(new Scenario());
		threadInstance.getScenarioLogic().performGreeting();
	}
}